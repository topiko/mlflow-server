version: "3.9"

services:


  minio:
    restart: always
    user: "1001:1001"
    image: minio/minio
    container_name: mlflow_minio
    volumes:
      - ./minio_data:/data
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      - frontend
      - backend
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 20s
      retries: 3

  minio-client:
    image: minio/mc
    user: "1001:1001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
    networks:
      - backend


  init-minio:
    image: minio/mc
    entrypoint: ["/bin/sh","-c"]
    command: ["./init-minio.sh"]
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MC_HOST_local: "http://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:9000"
      MINIO_BUCKET_NAME: "${MINIO_BUCKET_NAME}"
    volumes:
      - ./init-minio.sh:/init-minio.sh:ro
    working_dir: /
    networks:
      - backend     # <<< same network as minio
    restart: "no"


  postgres:
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - "5432:5432"

  mlflow_server:
    restart: always
    build: ./mlflow
    image: mlflow_server_with_boto3
    container_name: mlflow_server
    ports:
      - "${MLFLOW_PORT}:5000"
    networks:
      - frontend
      - backend
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_PORT}
      - MLFLOW_S3_IGNORE_TLS=true
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_S3_SIGNATURE_VERSION=s3v4
      - AWS_S3_FORCE_PATH_STYLE=true   # âœ… honored by boto3
      - AWS_EC2_METADATA_DISABLED=true
      - TMPDIR=/mlflow_data/tmp
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      --host 0.0.0.0
      --workers 1
      --serve-artifacts
      --artifacts-destination s3://${MINIO_BUCKET_NAME}
    volumes:
      - ./mlflow_data:/mlflow_data
    depends_on:
      - minio
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 3


  nginx:
    image: nginx:stable-alpine
    container_name: mlflow_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/htpasswd:/etc/nginx/htpasswd:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./certbot_data:/etc/letsencrypt  # shared with Certbot
    depends_on:
      - mlflow_server
    networks:
      - backend

  certbot:
    build: ./certbot
    user: "1001:1001"
    container_name: certbot
    environment:
      - PORKBUN_API_KEY=${PORKBUN_API_KEY}
      - PORKBUN_SECRET_API_KEY=${PORKBUN_API_SECRET}
    volumes:
      - ./certbot_data:/etc/letsencrypt  # shared with nginx
      - ./certbot_log:/var/log/letsencrypt
      - ./certbot_work:/var/lib/letsencrypt
    command: >
      certonly
             --non-interactive
             --agree-tos
             --email topiko1987@gmail.com
             --dns-porkbun-credentials /etc/letsencrypt/creds.ini
             --preferred-challenges dns
             --authenticator dns-porkbun
             --dns-porkbun-propagation-seconds 60
             -d ml.twohands.dev

volumes:
  db_data:
  minio_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
